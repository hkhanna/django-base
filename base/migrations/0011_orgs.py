# Generated by Django 3.2.16 on 2023-03-17 20:20

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0010_auto_20221101_1645'),
    ]

    operations = [
        migrations.CreateModel(
            name='Org',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the organization', max_length=254)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, help_text='The name in all lowercase, suitable for URL identification', max_length=127, populate_from='name', unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_personal', models.BooleanField()),
                ('current_period_end', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('name', 'slug'),
            },
        ),
        migrations.CreateModel(
            name='OrgSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=254, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('bool', 'Boolean'), ('int', 'Integer')], max_length=127)),
                ('default', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='OrgUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_accessed_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='OrgUserOUSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Org user org user setting',
            },
        ),
        migrations.CreateModel(
            name='OUSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=254, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('bool', 'Boolean'), ('int', 'Integer')], max_length=127)),
                ('default', models.IntegerField()),
                ('owner_value', models.IntegerField(help_text='The value that will be enforced for the org owner over all other defaults and values.')),
            ],
            options={
                'verbose_name': 'Org user setting',
            },
        ),
        migrations.CreateModel(
            name='OUSettingDefault',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Org user setting default',
            },
        ),
        migrations.CreateModel(
            name='OverriddenOrgSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=254, unique=True)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, help_text='The name in all lowercase, suitable for URL identification', max_length=127, overwrite=True, populate_from='name', unique=True)),
                ('is_default', models.BooleanField(default=False, help_text="Used when no plan is specified. E.g., for users' personal orgs. Only one plan can be default, so setting this will unset any other default plan.")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PlanOrgSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plan_org_settings', to='base.plan')),
                ('setting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plan_org_settings', to='base.orgsetting')),
            ],
        ),
        migrations.AddConstraint(
            model_name='plan',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('is_default',), name='unique_default_plan'),
        ),
        migrations.AddField(
            model_name='overriddenorgsetting',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overridden_org_settings', to='base.org'),
        ),
        migrations.AddField(
            model_name='overriddenorgsetting',
            name='setting',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overridden_org_settings', to='base.orgsetting'),
        ),
        migrations.AddField(
            model_name='ousettingdefault',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ou_setting_defaults', to='base.org'),
        ),
        migrations.AddField(
            model_name='ousettingdefault',
            name='setting',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ou_setting_defaults', to='base.ousetting'),
        ),
        migrations.AddField(
            model_name='orguserousetting',
            name='org_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='org_user_ou_settings', to='base.orguser'),
        ),
        migrations.AddField(
            model_name='orguserousetting',
            name='setting',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='org_user_ou_settings', to='base.ousetting'),
        ),
        migrations.AddField(
            model_name='orguser',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='org_users', to='base.org'),
        ),
        migrations.AddField(
            model_name='orguser',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='org_users', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='org',
            name='default_plan',
            field=models.ForeignKey(help_text='Default plan if the primary plan expires.', on_delete=django.db.models.deletion.PROTECT, related_name='default_orgs', to='base.plan'),
        ),
        migrations.AddField(
            model_name='org',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='owned_orgs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='org',
            name='primary_plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='primary_orgs', to='base.plan'),
        ),
        migrations.AddField(
            model_name='org',
            name='users',
            field=models.ManyToManyField(related_name='orgs', related_query_name='orgs', through='base.OrgUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='planorgsetting',
            constraint=models.UniqueConstraint(fields=('plan', 'setting'), name='unique_plan_setting'),
        ),
        migrations.AddConstraint(
            model_name='overriddenorgsetting',
            constraint=models.UniqueConstraint(fields=('org', 'setting'), name='unique_overridden_org_setting'),
        ),
        migrations.AddConstraint(
            model_name='ousettingdefault',
            constraint=models.UniqueConstraint(fields=('org', 'setting'), name='unique_ou_setting_defaults'),
        ),
        migrations.AddConstraint(
            model_name='orguserousetting',
            constraint=models.UniqueConstraint(fields=('org_user', 'setting'), name='unique_org_user_ou_setting'),
        ),
        migrations.AddConstraint(
            model_name='orguser',
            constraint=models.UniqueConstraint(fields=('user', 'org'), name='unique_user_org'),
        ),
        migrations.AddConstraint(
            model_name='org',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True), ('is_personal', True)), fields=('owner',), name='unique_personal_active_org'),
        ),
    ]
