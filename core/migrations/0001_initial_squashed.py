# Generated by Django 4.2.8 on 2024-01-30 14:25

import core.fields
import core.models
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
import django_extensions.db.fields
import secrets
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        error_messages={
                            "unique": "A user with that email already exists."
                        },
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        default=False,
                        help_text="Prevent the user from logging in.",
                        verbose_name="locked",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "email_history",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.EmailField(max_length=254),
                        blank=True,
                        default=list,
                        help_text="Record of all email addresses the user has had.",
                        size=None,
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Secondary ID",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", core.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="EmailMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("to_name", models.CharField(blank=True, max_length=254)),
                ("to_email", models.EmailField(max_length=254)),
                ("subject", models.CharField(blank=True, max_length=254)),
                ("template_prefix", models.CharField(max_length=254)),
                ("template_context", models.JSONField()),
                (
                    "postmark_message_stream",
                    models.CharField(
                        blank=True,
                        help_text="Leave blank if not using Postmark",
                        max_length=254,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("ready", "Ready"),
                            ("pending", "Pending"),
                            ("sent", "Sent"),
                            ("delivered", "Delivered"),
                            ("opened", "Opened"),
                            ("bounced", "Bounced"),
                            ("spam", "Spam"),
                            ("canceled", "Canceled"),
                            ("error", "Error"),
                        ],
                        default="new",
                        max_length=254,
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User that caused the EmailMessage to be created.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "message_id",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Message-ID provided by the sending service as per RFC 5322",
                        max_length=254,
                        null=True,
                        unique=True,
                    ),
                ),
                ("reply_to_email", models.EmailField(blank=True, max_length=254)),
                ("reply_to_name", models.CharField(blank=True, max_length=254)),
                ("sender_email", models.EmailField(max_length=254)),
                ("sender_name", models.CharField(blank=True, max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name="EmailMessageWebhook",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("received_at", models.DateTimeField(auto_now_add=True)),
                ("body", models.JSONField()),
                ("headers", models.JSONField()),
                ("type", models.CharField(blank=True, max_length=254)),
                ("note", models.TextField(blank=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("pending", "Pending"),
                            ("processed", "Processed"),
                            ("error", "Error"),
                        ],
                        default="new",
                        max_length=127,
                    ),
                ),
                (
                    "email_message",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.emailmessage",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Org",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the organization", max_length=254
                    ),
                ),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True,
                        editable=False,
                        help_text="The name in all lowercase, suitable for URL identification",
                        max_length=127,
                        populate_from="name",
                        unique=True,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_personal", models.BooleanField()),
                ("current_period_end", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ("name", "slug"),
            },
        ),
        migrations.CreateModel(
            name="OrgSetting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(max_length=254, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("bool", "Boolean"), ("int", "Integer")],
                        max_length=127,
                    ),
                ),
                ("default", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="OrgUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_accessed_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrgUserOUSetting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Org user org user setting",
            },
        ),
        migrations.CreateModel(
            name="OUSetting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(max_length=254, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("bool", "Boolean"), ("int", "Integer")],
                        max_length=127,
                    ),
                ),
                ("default", models.IntegerField()),
                (
                    "owner_value",
                    models.IntegerField(
                        help_text="The value that will be enforced for the org owner over all other defaults and values."
                    ),
                ),
            ],
            options={
                "verbose_name": "Org user setting",
            },
        ),
        migrations.CreateModel(
            name="OUSettingDefault",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Org user setting default",
            },
        ),
        migrations.CreateModel(
            name="OverriddenOrgSetting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Plan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=254, unique=True)),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True,
                        editable=False,
                        help_text="The name in all lowercase, suitable for URL identification",
                        max_length=127,
                        overwrite=True,
                        populate_from="name",
                        unique=True,
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(
                        default=False,
                        help_text="Used when no plan is specified. E.g., for users' personal orgs. Only one plan can be default, so setting this will unset any other default plan.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="PlanOrgSetting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plan_org_settings",
                        to="core.plan",
                    ),
                ),
                (
                    "setting",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plan_org_settings",
                        to="core.orgsetting",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="plan",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_default", True)),
                fields=("is_default",),
                name="unique_default_plan",
            ),
        ),
        migrations.AddField(
            model_name="overriddenorgsetting",
            name="org",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="overridden_org_settings",
                to="core.org",
            ),
        ),
        migrations.AddField(
            model_name="overriddenorgsetting",
            name="setting",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="overridden_org_settings",
                to="core.orgsetting",
            ),
        ),
        migrations.AddField(
            model_name="ousettingdefault",
            name="org",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ou_setting_defaults",
                to="core.org",
            ),
        ),
        migrations.AddField(
            model_name="ousettingdefault",
            name="setting",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ou_setting_defaults",
                to="core.ousetting",
            ),
        ),
        migrations.AddField(
            model_name="orguserousetting",
            name="org_user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="org_user_ou_settings",
                to="core.orguser",
            ),
        ),
        migrations.AddField(
            model_name="orguserousetting",
            name="setting",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="org_user_ou_settings",
                to="core.ousetting",
            ),
        ),
        migrations.AddField(
            model_name="orguser",
            name="org",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="org_users",
                to="core.org",
            ),
        ),
        migrations.AddField(
            model_name="orguser",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="org_users",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="org",
            name="default_plan",
            field=models.ForeignKey(
                help_text="Default plan if the primary plan expires.",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="default_orgs",
                to="core.plan",
            ),
        ),
        migrations.AddField(
            model_name="org",
            name="owner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="owned_orgs",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="org",
            name="primary_plan",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="primary_orgs",
                to="core.plan",
            ),
        ),
        migrations.AddField(
            model_name="org",
            name="users",
            field=models.ManyToManyField(
                related_name="orgs",
                related_query_name="orgs",
                through="core.OrgUser",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddConstraint(
            model_name="planorgsetting",
            constraint=models.UniqueConstraint(
                fields=("plan", "setting"), name="unique_plan_setting"
            ),
        ),
        migrations.AddConstraint(
            model_name="overriddenorgsetting",
            constraint=models.UniqueConstraint(
                fields=("org", "setting"), name="unique_overridden_org_setting"
            ),
        ),
        migrations.AddConstraint(
            model_name="ousettingdefault",
            constraint=models.UniqueConstraint(
                fields=("org", "setting"), name="unique_ou_setting_defaults"
            ),
        ),
        migrations.AddConstraint(
            model_name="orguserousetting",
            constraint=models.UniqueConstraint(
                fields=("org_user", "setting"), name="unique_org_user_ou_setting"
            ),
        ),
        migrations.AddConstraint(
            model_name="orguser",
            constraint=models.UniqueConstraint(
                fields=("user", "org"), name="unique_user_org"
            ),
        ),
        migrations.AddConstraint(
            model_name="org",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_active", True), ("is_personal", True)),
                fields=("owner",),
                name="unique_personal_active_org",
            ),
        ),
        migrations.AlterField(
            model_name="emailmessage",
            name="created_by",
            field=models.ForeignKey(
                help_text="User that caused the EmailMessage to be created.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="emailmessage",
            name="org",
            field=models.ForeignKey(
                help_text="The active Org of the User that caused the EmailMessage to be created.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="core.org",
            ),
        ),
        migrations.AddField(
            model_name="emailmessage",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="emailmessage",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4,
                editable=False,
                help_text="Secondary ID",
                unique=True,
                verbose_name="UUID",
            ),
        ),
        migrations.AddField(
            model_name="emailmessagewebhook",
            name="created_at",
            field=models.DateTimeField(
                db_index=True, default=django.utils.timezone.now
            ),
        ),
        migrations.AddField(
            model_name="emailmessagewebhook",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="org",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4,
                editable=False,
                help_text="Secondary ID",
                unique=True,
                verbose_name="UUID",
            ),
        ),
        migrations.AddField(
            model_name="orguser",
            name="created_at",
            field=models.DateTimeField(
                db_index=True, default=django.utils.timezone.now
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name="emailmessage",
            name="created_at",
            field=models.DateTimeField(
                db_index=True, default=django.utils.timezone.now
            ),
        ),
        migrations.AlterField(
            model_name="org",
            name="created_at",
            field=models.DateTimeField(
                db_index=True, default=django.utils.timezone.now
            ),
        ),
        migrations.AlterField(
            model_name="orgsetting",
            name="created_at",
            field=models.DateTimeField(
                db_index=True, default=django.utils.timezone.now
            ),
        ),
        migrations.AlterField(
            model_name="orguserousetting",
            name="created_at",
            field=models.DateTimeField(
                db_index=True, default=django.utils.timezone.now
            ),
        ),
        migrations.AlterField(
            model_name="ousetting",
            name="created_at",
            field=models.DateTimeField(
                db_index=True, default=django.utils.timezone.now
            ),
        ),
        migrations.AlterField(
            model_name="ousettingdefault",
            name="created_at",
            field=models.DateTimeField(
                db_index=True, default=django.utils.timezone.now
            ),
        ),
        migrations.AlterField(
            model_name="overriddenorgsetting",
            name="created_at",
            field=models.DateTimeField(
                db_index=True, default=django.utils.timezone.now
            ),
        ),
        migrations.AlterField(
            model_name="plan",
            name="created_at",
            field=models.DateTimeField(
                db_index=True, default=django.utils.timezone.now
            ),
        ),
        migrations.AlterField(
            model_name="planorgsetting",
            name="created_at",
            field=models.DateTimeField(
                db_index=True, default=django.utils.timezone.now
            ),
        ),
        migrations.RemoveField(
            model_name="orguser",
            name="joined_at",
        ),
        migrations.AddField(
            model_name="emailmessagewebhook",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4,
                editable=False,
                help_text="Secondary ID",
                unique=True,
                verbose_name="UUID",
            ),
        ),
        migrations.AddField(
            model_name="orgsetting",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4,
                editable=False,
                help_text="Secondary ID",
                unique=True,
                verbose_name="UUID",
            ),
        ),
        migrations.AddField(
            model_name="orguser",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4,
                editable=False,
                help_text="Secondary ID",
                unique=True,
                verbose_name="UUID",
            ),
        ),
        migrations.AddField(
            model_name="orguserousetting",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4,
                editable=False,
                help_text="Secondary ID",
                unique=True,
                verbose_name="UUID",
            ),
        ),
        migrations.AddField(
            model_name="ousetting",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4,
                editable=False,
                help_text="Secondary ID",
                unique=True,
                verbose_name="UUID",
            ),
        ),
        migrations.AddField(
            model_name="ousettingdefault",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4,
                editable=False,
                help_text="Secondary ID",
                unique=True,
                verbose_name="UUID",
            ),
        ),
        migrations.AddField(
            model_name="overriddenorgsetting",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4,
                editable=False,
                help_text="Secondary ID",
                unique=True,
                verbose_name="UUID",
            ),
        ),
        migrations.AddField(
            model_name="plan",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4,
                editable=False,
                help_text="Secondary ID",
                unique=True,
                verbose_name="UUID",
            ),
        ),
        migrations.AddField(
            model_name="planorgsetting",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4,
                editable=False,
                help_text="Secondary ID",
                unique=True,
                verbose_name="UUID",
            ),
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Secondary ID",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("occurred_at", models.DateTimeField()),
                ("type", models.CharField(max_length=127)),
                ("data", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OrgInvitation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Secondary ID",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "token",
                    models.CharField(default=secrets.token_urlsafe, max_length=254),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Email address of the invitee", max_length=254
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="org_invitations_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "email_messages",
                    models.ManyToManyField(
                        related_name="org_invitations", to="core.emailmessage"
                    ),
                ),
                (
                    "invitee",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="org_invitations_received",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invitations",
                        to="core.org",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AlterField(
            model_name="emailmessage",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                help_text="User that caused the EmailMessage to be created.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="emailmessage",
            name="org",
            field=models.ForeignKey(
                blank=True,
                help_text="The active Org of the User that caused the EmailMessage to be created.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="core.org",
            ),
        ),
        migrations.AlterField(
            model_name="emailmessage",
            name="template_context",
            field=models.JSONField(blank=True),
        ),
        migrations.RenameModel(
            old_name="OUSetting",
            new_name="OrgUserSetting",
        ),
        migrations.AlterModelOptions(
            name="orgusersetting",
            options={},
        ),
        migrations.CreateModel(
            name="OrgUserOrgUserSetting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Secondary ID",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("value", models.IntegerField()),
                (
                    "org_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="org_user_org_user_settings",
                        to="core.orguser",
                    ),
                ),
                (
                    "setting",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="org_user_org_user_settings",
                        to="core.orgusersetting",
                    ),
                ),
            ],
        ),
        migrations.DeleteModel(
            name="OrgUserOUSetting",
        ),
        migrations.AddConstraint(
            model_name="orguserorgusersetting",
            constraint=models.UniqueConstraint(
                fields=("org_user", "setting"), name="unique_org_user_org_user_setting"
            ),
        ),
        migrations.CreateModel(
            name="OrgUserSettingDefault",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Secondary ID",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("value", models.IntegerField()),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="org_user_setting_defaults",
                        to="core.org",
                    ),
                ),
                (
                    "setting",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="org_user_setting_defaults",
                        to="core.orgusersetting",
                    ),
                ),
            ],
        ),
        migrations.DeleteModel(
            name="OUSettingDefault",
        ),
        migrations.AddConstraint(
            model_name="orgusersettingdefault",
            constraint=models.UniqueConstraint(
                fields=("org", "setting"), name="unique_org_user_setting_defaults"
            ),
        ),
        migrations.CreateModel(
            name="EmailMessageAttachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Secondary ID",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("file", models.FileField(upload_to="email_message_attachments/")),
                ("filename", models.CharField(max_length=254)),
                ("mimetype", models.CharField(max_length=254)),
                (
                    "email_message",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="core.emailmessage",
                    ),
                ),
            ],
            options={
                "order_with_respect_to": "email_message",
            },
        ),
        migrations.AlterField(
            model_name="emailmessage",
            name="template_context",
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.CreateModel(
            name="GlobalSetting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Secondary ID",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("slug", models.SlugField(max_length=254, unique=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("bool", "Boolean"),
                            ("int", "Integer"),
                            ("str", "String"),
                        ],
                        max_length=127,
                    ),
                ),
                ("value", models.CharField(max_length=254)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AlterField(
            model_name="orgsetting",
            name="default",
            field=models.CharField(max_length=254),
        ),
        migrations.AlterField(
            model_name="orgsetting",
            name="type",
            field=models.CharField(
                choices=[("bool", "Boolean"), ("int", "Integer"), ("str", "String")],
                max_length=127,
            ),
        ),
        migrations.AlterField(
            model_name="orguserorgusersetting",
            name="value",
            field=models.CharField(max_length=254),
        ),
        migrations.AlterField(
            model_name="orgusersetting",
            name="default",
            field=models.CharField(max_length=254),
        ),
        migrations.AlterField(
            model_name="orgusersetting",
            name="owner_value",
            field=models.CharField(
                help_text="The value that will be enforced for the org owner over all other defaults and values.",
                max_length=254,
            ),
        ),
        migrations.AlterField(
            model_name="orgusersetting",
            name="type",
            field=models.CharField(
                choices=[("bool", "Boolean"), ("int", "Integer"), ("str", "String")],
                max_length=127,
            ),
        ),
        migrations.AlterField(
            model_name="orgusersettingdefault",
            name="value",
            field=models.CharField(max_length=254),
        ),
        migrations.AlterField(
            model_name="overriddenorgsetting",
            name="value",
            field=models.CharField(max_length=254),
        ),
        migrations.AlterField(
            model_name="planorgsetting",
            name="value",
            field=models.CharField(max_length=254),
        ),
        migrations.AlterModelOptions(
            name="user",
            options={},
        ),
        migrations.RemoveField(
            model_name="user",
            name="date_joined",
        ),
        migrations.RemoveField(
            model_name="user",
            name="is_locked",
        ),
        migrations.AddField(
            model_name="user",
            name="created_at",
            field=models.DateTimeField(
                db_index=True, default=django.utils.timezone.now
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="display_name",
            field=models.CharField(
                blank=True,
                help_text="The name that will be displayed by default to other users.",
                max_length=254,
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="email",
            field=core.fields.EmailFieldCaseInsensitive(
                max_length=254, unique=True, verbose_name="email address"
            ),
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("email"),
                name="unique_email_case_insensitive",
            ),
        ),
        migrations.RemoveField(
            model_name="orginvitation",
            name="created_by",
        ),
        migrations.RemoveField(
            model_name="orginvitation",
            name="email_messages",
        ),
        migrations.RemoveField(
            model_name="orginvitation",
            name="invitee",
        ),
        migrations.RemoveField(
            model_name="orginvitation",
            name="org",
        ),
        migrations.RemoveConstraint(
            model_name="org",
            name="unique_personal_active_org",
        ),
        migrations.RemoveField(
            model_name="org",
            name="is_personal",
        ),
        migrations.AlterField(
            model_name="plan",
            name="is_default",
            field=models.BooleanField(
                default=False,
                help_text="Used by an org when no plan is specified. Only one plan can be default, so setting this will unset any other default plan.",
            ),
        ),
        migrations.DeleteModel(
            name="OrgInvitation",
        ),
    ]
